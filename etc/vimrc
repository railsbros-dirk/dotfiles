" This is the vim config of Dirk Breuer
" Machine/user specific should go into ~/.vimrc.local

" Initial stuff ***************************************************************

set nocompatible " Must come first because it changes other options.
filetype off     " required for vundle
let mapleader = ","


" Vundle **********************************************************************

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" Bundles *********************************************************************

Bundle 'tpope/vim-fugitive'

Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-haml'
Bundle 'tsaleh/vim-align'
Bundle 'vim-scripts/ZoomWin'
Bundle 'sickill/vim-pasta'
Bundle 'tpope/vim-endwise'

Bundle 'tpope/vim-liquid'

Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'

Bundle 'mileszs/ack.vim'

Bundle 'sjl/gundo.vim'

Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'Raimondi/delimitMate'
Bundle 'kchmck/vim-coffee-script'
Bundle 'pangloss/vim-javascript'
Bundle 'railsbros-dirk/Vim-Tomorrow-Theme'

Bundle 'tomtom/tlib_vim'

Bundle 'garbas/vim-snipmate'

Bundle 'samsonw/vim-task'

Bundle 'scrooloose/nerdtree'

Bundle 'Lokaltog/vim-powerline'
let g:Powerline_symbols = 'unicode'

" File Navigation *************************************************************

Bundle 'L9'

Bundle 'kien/ctrlp.vim'
let g:ctrlp_match_window_reversed = 0

" Tabs ************************************************************************
"set sta " a <Tab> in an indent inserts 'shiftwidth' spaces

function! Tabstyle_tabs()
  " Using 4 column tabs
  set softtabstop=4
  set shiftwidth=4
  set tabstop=4
  set noexpandtab|retab!
  autocmd User Rails set softtabstop=4
  autocmd User Rails set shiftwidth=4
  autocmd User Rails set tabstop=4
  autocmd User Rails set noexpandtab
endfunction

function! Tabstyle_spaces()
  " Use 2 spaces
  set softtabstop=2
  set shiftwidth=2
  set tabstop=2
  set smarttab
  set expandtab|retab
endfunction

call Tabstyle_spaces()

command Tst :call Tabstyle_tabs()
command Tss :call Tabstyle_spaces()

" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent (local to buffer)
filetype plugin indent on " Turn on file type detection.
set ofu=syntaxcomplete#Complete
set completeopt=longest,menuone
set complete-=i


" Scrollbars ******************************************************************
set sidescrolloff=2
set numberwidth=4


" Syntax Cecking **************************************************************
Bundle 'scrooloose/syntastic'

let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['ruby'],
                           \ 'passive_filetypes': ['scss', 'css', 'sass', 'javascript'] }

" Windows *********************************************************************
set equalalways " Multiple windows, when created, are equal in size
set splitbelow splitright

" Vertical and horizontal split then hop to a new buffer
:noremap <Leader>v :vsp<cr>
:noremap <Leader>h :split<cr>


" Cursor highlights ***********************************************************
set cursorline

" Runtime *********************************************************************
runtime macros/matchit.vim             " Load the matchit plugin.
runtime snippets/support_functions.vim " Load the snippet support functions

" Searching *******************************************************************
set hlsearch             " highlight search
set incsearch            " Incremental search, search as you type
set ignorecase smartcase " Ignore case when searching
set smartcase            " Ignore case when searching lowercase


" Colors **********************************************************************
set t_Co=256 " 256 colors
set background=dark
syntax enable " Turn on syntax highlighting.
colorscheme Tomorrow-Night-Bright


" Status Line *****************************************************************
set showcmd
set ruler " Show ruler
"set ch=2 " Make command line two lines high
"match LongLineWarning '\%120v.*' " Error format when a line is longer than 120
set showmode " Display the mode you're in.
" Useful status information at bottom of screen
"set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)\ %P


" Line Wrapping ***************************************************************
set nowrap
set scrolloff=3       " Show 3 lines of context around the cursor.
set linebreak         " Wrap at word
set nolist
set formatoptions=tq
set wrapmargin=4
set textwidth=120
set formatoptions+=l

" Directories *****************************************************************
set nobackup          " Don't make a backup before overwriting a file.
set nowritebackup     " And again.
set noswapfile        " Don't use swapfiles"

" File Stuff ******************************************************************
filetype plugin indent on

" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize


" Invisible characters *********************************************************
set listchars=trail:.,tab:>-
set list
noremap <Leader>i :set list!<CR> " Toggle invisible chars


" Misc settings ***************************************************************
" Syntax coloring lines that are too long just slows down the world

" Clear the search buffer when hitting return
nnoremap <C-CR> :nohlsearch<cr>
nnoremap <leader><leader> <c-^>


set winwidth=79
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
"set t_ti= t_te=

set backspace=indent,eol,start " Intuitive backspacing.
set number " Show line numbers
set vb t_vb= " Turn off bell, this could be more annoying, but I'm not sure how
set hidden " Handle multiple buffers better.
map Q <Esc> " Get rid of awkward Ex-mode
map U :redo<CR>
set shell=/bin/bash " Some commands seem to have problems with zsh"
set laststatus=2 " Show the status line all the time
set title " Set the terminal's title
set wildignore+=log,tmp,*.swp
set clipboard=unnamed " Copy to system pasteboard

" Syntax checking for ruby
map <Leader>c :!ruby -c %<CR>

" Set encoding
set encoding=utf-8

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Enable auto-save / auto-write
set autowrite
set autowriteall
au BufLeave,FocusLost * silent! :wa

" :W to save with sudo
command W w !sudo tee % > /dev/null

" Folding *********************************************************************
" Automatic fold settings for specific files. Uncomment to use.
set nofoldenable " Turn on folding
set foldmethod=syntax " Folding based on syntax
set foldlevel=1


" OSX like movement ************************************************************

" Jump words with alt-arrow (osx style)
map <M-Left> b
map <M-Right> w
imap <M-Left> <Esc>bi
imap <M-Right> <Esc><Right>wi

" Mac bindings for home/end
imap <D-Left> <Esc>^i
imap <D-Right> <Esc>g$i
map <D-Left> ^
map <D-Right> g$

" Fuck you, manual key
nnoremap K <nop>

" Navigation ******************************************************************

" Make cursor move by visual lines instead of file lines (when wrapping)
map <up> gk
map k gk
imap <up> <C-o>gk
map <down> gj
map j gj
imap <down> <C-o>gj
map E ge

" Resize splits with home H/J/K/L
map <Leader>H :vertical res -5<CR>
map <Leader>L :vertical res +5<CR>
map <Leader>K :res +5<CR>
map <Leader>J :res -5<CR>

" Remove trailing spaces
function RemoveTrailingSpaces()
  %s/\v[\t ]{-1,}$//g
endfunction

command Rts :call RemoveTrailingSpaces()

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways


" Ruby stuff ******************************************************************
"compiler ruby         " Enable compiler support for ruby
"map <F5> :!ruby %<CR>


" Custom auto commands
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  "Sourced from vim tip: http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
  autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
  autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

  autocmd FileType text setlocal textwidth=78
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
  autocmd FileType ruby,javascript set synmaxcol=255
  autocmd FileType python set sw=4 sts=4 et

  autocmd! BufRead,BufNewFile *.sass setfiletype sass 

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

  autocmd FileType ruby set foldmethod=syntax
  autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2

  " Omni Completion *************************************************************
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
  autocmd FileType python set omnifunc=pythoncomplete#Complete
  autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
  autocmd FileType c set omnifunc=ccomplete#Complete
  " May require ruby compiled in
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
augroup END

" Hard to type *****************************************************************
imap <C-l> <space>=><space>


" -----------------------------------------------------------------------------
" |                              Plug-ins                                     |
" -----------------------------------------------------------------------------

" Commenter **************************************************************

Bundle 'tomtom/tcomment_vim'

map <leader>/ :TComment<CR>


" Unimpaired *********************************************************
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" railsvim ***************************************************************
let g:rubycomplete_rails = 1


" Javascript *************************************************************
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" Markdown ***************************************************************

function s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function <SID>previewMarkdown()
  silent execute "!mark % > /dev/null 2>&1 &"
  redraw!
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :call <SID>previewMarkdown()<CR>
endfunction

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set ft=markdown

" make and python use real tabs
au FileType make                                     set noexpandtab
au FileType python                                   set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" toggles the Gundo graph
nnoremap <F5> :GundoToggle<CR>

" set the tmp path for markdown-preview
let g:MarkdownPreviewTMP = '/tmp/vim-markdown-preview'

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Adjust viewports to the same size
map <Leader>= <C-w>=
imap <Leader>= <Esc> <C-w>=i

" Use modeline overrides
set modeline
set modelines=10

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" Show (partial) command in the status line
set showcmd

autocmd FileType ruby compiler ruby

function Run()
  let executable=b:current_compiler

  if !getbufvar("%", "&saved")
    let tmpfile = tempname()
    silent! exe "write " . tmpfile . ".rb"
  endif

  let filename=expand('%:p')

  " Create the previewwindow if doesn't exist
  if ! &previewwindow
    pedit /tmp/_vim_previewwindow
  endif
  " Change to the previewwindow
  silent! wincmd P
  " Run the file with and switch back to the previous window
  execute "%d|silent 0r!" . executable . " '" . filename . "'"
  wincmd p
endfunction

map <Leader>r :call Run()<CR>

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
